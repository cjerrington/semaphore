{"version":3,"file":"1216.8333da3f7b2d6feec5fc.requests.js","mappings":"mQAMOA,eAAeC,EAAoCC,EAAWC,EAAUC,GAC7E,MAAM,gBACJC,EAAe,YACfC,GACEC,EAAA,QACJ,IACMJ,QCTDH,eAAqCQ,EAAcF,EAAaJ,GACrE,MAAMO,EAAM,IAAG,OAASD,6BAAwCN,cAChE,OAAO,QAAKO,EAAK,MAAM,OAAKH,GAAc,CAAEI,QAAS,MACvD,CDOYC,CAAqBN,EAAiBC,EAAaJ,SCLxDF,eAAoCQ,EAAcF,EAAaJ,GACpE,MAAMO,EAAM,IAAG,OAASD,6BAAwCN,WAChE,OAAO,QAAKO,EAAK,MAAM,OAAKH,GAAc,CAAEI,QAAS,MACvD,CDIYE,CAAoBP,EAAiBC,EAAaJ,GAEtDE,GACaS,EAAA,MAAUV,EAAW,0BAA4B,4BAElE,OAAK,sBAOP,CANE,MAAOW,GACPC,QAAQC,MAAMF,GACCD,EAAA,MAAUV,GACrB,EAAAc,EAAA,GAAW,CAAC,qCAAqC,CAAC,UAAW,CAAED,MAAQF,EAAEI,SAAW,MACpF,EAAAD,EAAA,GAAW,CAAC,oCAAoC,CAAC,UAAW,CAAED,MAAQF,EAAEI,SAAW,KAEzF,CACF,C,cERA,YAgBwB,iBAAEC,EAAgB,aAAEC,I,OAAmBpB,UACvD,MAAMqB,QAAmB,QAAkBF,EAAkBC,GAE7D,OA1BR,SAAkCD,EAAkBE,GACjCC,EAAA,wBAA+BH,EAAkBE,EAAWE,QAC3E,MAAM,oBAAEC,GAAwBjB,EAAA,QAChCiB,EAAoBL,GAAoBE,EAAWE,OACnDhB,EAAA,MAAU,CAAEiB,uBAChB,CAoBQC,CAAsBN,EAAkBE,GACjCA,E,0CArCMK,gB,iBAAkBC,gB,+KAAlBD,iB,sCAAkBC,gB,4FAwCtBpB,EAAA,E,mGArBA,CACXoB,eAAgB,CACd,CACEC,KAAM,YACNC,MAAO,UACPC,QAAU5B,GAAcD,EAAmCC,GAAW,GAAM,IAE9E,CACE0B,KAAM,YACNC,MAAO,SACPC,QAAU5B,GAAcD,EAAmCC,GAAW,GAAO,O,mUA9BnE,wB,yMAAf6B,gB,4hBCcY,CACXC,cAAa,G,oJAdNA,c,SAAgBC,Q,gRAAhBD,e,sBAAgBC,Q,6SCCtBjC,eAAekC,EAAmB1B,EAAcF,GACrD,MAAMG,EAAM,IAAG,OAASD,4BACxB,OAAO,QAAIC,GAAK,OAAKH,GAAc,CAAEI,QAAS,MAChD,C,kCCNO,MCkBMyB,EAAgB,IAAIC,MAAM,CAAC,EAZxB,CACdC,IAAK,SAAUC,EAAKC,GAClB,OAAOvC,kBAAmBwC,GACxB,IAAKF,EAAIC,GAAO,CACd,MAAMjB,QDVsB,wDCW5BgB,EAAIC,GAAQjB,EAASiB,EACvB,CACA,OAAOD,EAAIC,GAAME,MAAM,KAAMD,EAC/B,CACF,G","sources":["webpack://semaphore/./src/routes/_actions/requests.js","webpack://semaphore/./src/routes/_api/requests.js","webpack://semaphore/./src/routes/_pages/requests.html","webpack://semaphore/./src/routes/requests.html","webpack://semaphore/./src/routes/_api/followRequests.js","webpack://semaphore/./src/routes/_utils/asyncModules/importDatabase.js","webpack://semaphore/./src/routes/_database/asyncDatabase.js"],"sourcesContent":["import { store } from '../_store/store.js'\nimport { approveFollowRequest, rejectFollowRequest } from '../_api/requests.js'\nimport { emit } from '../_utils/eventBus.js'\nimport { toast } from '../_components/toast/toast.js'\nimport { formatIntl } from '../_utils/formatIntl.js'\n\nexport async function setFollowRequestApprovedOrRejected (accountId, approved, toastOnSuccess) {\n  const {\n    currentInstance,\n    accessToken\n  } = store.get()\n  try {\n    if (approved) {\n      await approveFollowRequest(currentInstance, accessToken, accountId)\n    } else {\n      await rejectFollowRequest(currentInstance, accessToken, accountId)\n    }\n    if (toastOnSuccess) {\n      /* no await */ toast.say(approved ? \"Approved follow request\" : \"Rejected follow request\")\n    }\n    emit('refreshAccountsList')\n  } catch (e) {\n    console.error(e)\n    /* no await */ toast.say(approved\n      ? formatIntl([\"Unable to approve follow request: \",[\"error\"]], { error: (e.message || '') })\n      : formatIntl([\"Unable to reject follow request: \",[\"error\"]], { error: (e.message || '') })\n    )\n  }\n}\n","import { post, WRITE_TIMEOUT } from '../_utils/ajax.js'\nimport { auth, basename } from './utils.js'\n\nexport async function approveFollowRequest (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/follow_requests/${accountId}/authorize`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n\nexport async function rejectFollowRequest (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/follow_requests/${accountId}/reject`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n","<DynamicPageBanner title=\"Follow requests\" icon=\"#fa-user-plus\" />\n{#if $isUserLoggedIn }\n  <AccountsListPage {accountsFetcher} {accountActions} />\n{/if}\n<script>\n  import AccountsListPage from '../_components/AccountsListPage.html'\n  import { store } from '../_store/store.js'\n  import { getFollowRequests } from '../_api/followRequests.js'\n  import DynamicPageBanner from '../_components/DynamicPageBanner.html'\n  import { setFollowRequestApprovedOrRejected } from '../_actions/requests.js'\n  import { database } from '../_database/database.js'\n\n  // sneakily update the follow reqs count in the cache, since we just fetched it\n  function updateFollowReqsCount ($currentInstance, followReqs) {\n    /* no await */ database.setFollowRequestCount($currentInstance, followReqs.length)\n    const { followRequestCounts } = store.get()\n    followRequestCounts[$currentInstance] = followReqs.length\n    store.set({ followRequestCounts })\n  }\n\n  export default {\n    data: () => ({\n      accountActions: [\n        {\n          icon: '#fa-check',\n          label: \"Approve\",\n          onclick: (accountId) => setFollowRequestApprovedOrRejected(accountId, true, true)\n        },\n        {\n          icon: '#fa-times',\n          label: \"Reject\",\n          onclick: (accountId) => setFollowRequestApprovedOrRejected(accountId, false, true)\n        }\n      ]\n    }),\n    computed: {\n      accountsFetcher: ({ $currentInstance, $accessToken }) => async () => {\n        const followReqs = await getFollowRequests($currentInstance, $accessToken)\n        updateFollowReqsCount($currentInstance, followReqs)\n        return followReqs\n      }\n    },\n    store: () => store,\n    components: {\n      AccountsListPage,\n      DynamicPageBanner\n    }\n  }\n</script>\n","<Title name=\"Follow requests\" />\n\n  <LazyPage {pageComponent} {params} />\n\n<script>\n  import Title from './_components/Title.html'\n  import LazyPage from './_components/LazyPage.html'\n  import pageComponent from './_pages/requests.html'\n\n  export default {\n    components: {\n\n      Title,\n      LazyPage\n    },\n    data: () => ({\n      pageComponent\n    })\n  }\n</script>\n","import { DEFAULT_TIMEOUT, get, post, WRITE_TIMEOUT } from '../_utils/ajax.js'\nimport { auth, basename } from './utils.js'\n\nexport async function getFollowRequests (instanceName, accessToken) {\n  const url = `${basename(instanceName)}/api/v1/follow_requests`\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n\nexport async function authorizeFollowRequest (instanceName, accessToken, id) {\n  const url = `${basename(instanceName)}/api/v1/follow_requests/${id}/authorize`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n\nexport async function rejectFollowRequest (instanceName, accessToken, id) {\n  const url = `${basename(instanceName)}/api/v1/follow_requests/${id}/reject`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n","export const importDatabase = () => import(\n  '../../_database/databaseApis.js'\n)\n","// All database functions are asynchronous, so we can just proxy here and\n// put an async import of the database, to avoid including it in the main bundle\n// (which doesn't need to run when the user isn't logged in).\n\nimport { importDatabase } from '../_utils/asyncModules/importDatabase.js'\n\nconst handler = {\n  get: function (obj, prop) {\n    return async function (...args) {\n      if (!obj[prop]) {\n        const database = await importDatabase()\n        obj[prop] = database[prop]\n      }\n      return obj[prop].apply(null, args)\n    }\n  }\n}\n\nexport const asyncDatabase = new Proxy({}, handler)\n"],"names":["async","setFollowRequestApprovedOrRejected","accountId","approved","toastOnSuccess","currentInstance","accessToken","store","instanceName","url","timeout","approveFollowRequest","rejectFollowRequest","toast","e","console","error","formatIntl","message","$currentInstance","$accessToken","followReqs","database","length","followRequestCounts","updateFollowReqsCount","accountsFetcher","accountActions","icon","label","onclick","$isUserLoggedIn","pageComponent","params","getFollowRequests","asyncDatabase","Proxy","get","obj","prop","args","apply"],"sourceRoot":""}