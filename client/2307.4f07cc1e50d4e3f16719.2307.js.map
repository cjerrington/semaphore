{"version":3,"file":"2307.4f07cc1e50d4e3f16719.2307.js","mappings":"4PAWO,SAASA,EAAaC,EAAcC,GACzC,MAAM,eAAEC,GAAmB,UAC3BA,EAAeF,GAAgBC,EAC/B,QAAU,CAAEC,mBACZ,WACA,MAAM,gBAAEC,GAAoB,UAC5B,GAAIH,IAAiBG,EAAiB,CACpC,MAAM,gBAAEC,GAAoB,WAC5B,QAAcH,EAAUG,EAC1B,CACF,CAEO,SAASC,EAAkBL,GAChC,MAAM,eAAEE,GAAmB,UAC3B,QAAU,CACRC,gBAAiBH,EACjBM,cAAe,KACfC,cAAe,KAEjB,WACA,MAAM,gBAAEH,GAAoB,WAC5B,QAAcF,EAAeF,GAAeI,EAC9C,CAEOI,eAAeC,EAAkBT,EAAcU,GACpDA,EAAUA,IAAW,EAAAC,EAAA,GAAW,CAAC,iBAAiB,CAAC,aAAc,CAAEC,SAAUZ,IAC7E,MAAM,YACJa,EAAW,gBACXV,EAAe,YACfW,EAAW,cACXC,EAAa,cACbC,EAAa,eACbd,EAAc,kBACde,EAAiB,yBACjBC,EAAwB,kBACxBC,GACE,UACJD,EAAyBE,OAAOF,EAAyBG,QAAQrB,GAAe,GAChF,MAAMsB,EAActB,IAAiBG,EAAkBe,EAAyB,GAAKf,EAC/EoB,EAAiB,CACrBV,EACAC,EACAC,EACAC,EACAd,EACAe,EACAE,GAEF,IAAK,MAAMK,KAAOD,SACTC,EAAIxB,GAEb,QAAU,CACRa,cACAV,gBAAiBmB,EACjBR,cACAC,gBACAC,gBACAd,iBACAe,oBACAC,2BACAX,cAAe,GACfD,cAAe,KACfmB,qBAAqB,EACrBC,wBAAwB,EACxBP,sBAEF,iCAAmCnB,GACnC,oCAAsCA,GACtC,WACA,MAAM,iBAAE2B,SChFkC,kEDiF1CA,EAAiBC,mBAAmBzB,EAAkB,KACtD0B,EAAA,MAAUnB,GACV,MAAM,gBAAEN,GAAoB,WAC5B,QAAcF,EAAeoB,GAAclB,GAC5B0B,EAAA,2BAAkC9B,IACjD,QAAK,sBACP,CAQOQ,eAAeuB,EAAoC/B,GACxD,MAAM,kBAAEiB,GAAsB,UACxBe,EAAcf,EAAkBjB,GAAciC,mBAC9C,QACJ,KAAM,OAAqBjC,EAAcgC,GAAaE,MA6BnD,SAA+BlC,GACpC,OAAOQ,UAKL,MAJI2B,EAAMzB,QAAQ0B,WAAW,eACrB3B,EAAiBT,GAAc,EAAAW,EAAA,GAAW,CAAC,+CAA+C,CAAC,aAAc,CAAEC,SAAUZ,KAGvHmC,EAEV,CArCgEE,CAAqBrC,MACjF,IAAM8B,EAAA,+BAAsC9B,KAC5CmB,GAAqBW,EAAA,+BAAsC9B,EAAcmB,KACzEA,GAbJ,SAAoCnB,EAAcsC,GAChD,MAAM,kBAAEnB,GAAsB,UAC9BA,EAAkBnB,GAAgBsC,EAClC,QAAU,CAAEnB,qBACd,CASyBoB,CAA0BvC,EAAcmB,IAEjE,CAOOX,eAAegC,EAAoBxC,SAClC,QACJ,KACE,MAAM,kBAAEiB,GAAsB,UACxBe,EAAcf,EAAkBjB,IAAiBiB,EAAkBjB,GAAciC,aACvF,OAAO,OAAgBjC,EAAcgC,EAAW,IAElD,IAAMF,EAAA,kBAAyB9B,KAC/ByC,GAAQX,EAAA,kBAAyB9B,EAAcyC,KAC/CA,IACE,MAAM,cAAE1B,GAAkB,UAC1BA,EAAcf,GAAgByC,EAC9B,QAAU,CAAE1B,iBAAe,GAGjC,C,wDE3HO,SAAS2B,EAAiB1C,EAAcgC,GAC7C,MAAMW,EAAM,IAAG,OAAS3C,qBAElB4C,EAAUZ,GAAc,OAAKA,GAAe,KAClD,OAAO,QAAIW,EAAKC,EAAS,CAAEC,QAAS,MACtC,C","sources":["webpack://semaphore/./src/routes/_actions/instances.js","webpack://semaphore/./src/routes/_utils/asyncModules/importVirtualListStore.js","webpack://semaphore/./src/routes/_api/instance.js"],"sourcesContent":["import { getVerifyCredentials } from '../_api/user.js'\nimport { store } from '../_store/store.js'\nimport { switchToTheme } from '../_utils/themeEngine.js'\nimport { toast } from '../_components/toast/toast.js'\nimport { goto } from '../../../__sapper__/client.js'\nimport { cacheFirstUpdateAfter } from '../_utils/sync.js'\nimport { getInstanceInfo } from '../_api/instance.js'\nimport { database } from '../_database/database.js'\nimport { importVirtualListStore } from '../_utils/asyncModules/importVirtualListStore.js'\nimport { formatIntl } from '../_utils/formatIntl.js'\n\nexport function changeTheme (instanceName, newTheme) {\n  const { instanceThemes } = store.get()\n  instanceThemes[instanceName] = newTheme\n  store.set({ instanceThemes })\n  store.save()\n  const { currentInstance } = store.get()\n  if (instanceName === currentInstance) {\n    const { enableGrayscale } = store.get()\n    switchToTheme(newTheme, enableGrayscale)\n  }\n}\n\nexport function switchToInstance (instanceName) {\n  const { instanceThemes } = store.get()\n  store.set({\n    currentInstance: instanceName,\n    searchResults: null,\n    queryInSearch: ''\n  })\n  store.save()\n  const { enableGrayscale } = store.get()\n  switchToTheme(instanceThemes[instanceName], enableGrayscale)\n}\n\nexport async function logOutOfInstance (instanceName, message) {\n  message = message || formatIntl([\"Logged out of \",[\"instance\"]], { instance: instanceName })\n  const {\n    composeData,\n    currentInstance,\n    customEmoji,\n    instanceInfos,\n    instanceLists,\n    instanceThemes,\n    loggedInInstances,\n    loggedInInstancesInOrder,\n    verifyCredentials\n  } = store.get()\n  loggedInInstancesInOrder.splice(loggedInInstancesInOrder.indexOf(instanceName), 1)\n  const newInstance = instanceName === currentInstance ? loggedInInstancesInOrder[0] : currentInstance\n  const objectsToClear = [\n    composeData,\n    customEmoji,\n    instanceInfos,\n    instanceLists,\n    instanceThemes,\n    loggedInInstances,\n    verifyCredentials\n  ]\n  for (const obj of objectsToClear) {\n    delete obj[instanceName]\n  }\n  store.set({\n    composeData,\n    currentInstance: newInstance,\n    customEmoji,\n    instanceInfos,\n    instanceLists,\n    instanceThemes,\n    loggedInInstances,\n    loggedInInstancesInOrder,\n    queryInSearch: '',\n    searchResults: null,\n    timelineInitialized: false,\n    timelinePreinitialized: false,\n    verifyCredentials\n  })\n  store.clearTimelineDataForInstance(instanceName)\n  store.clearAutosuggestDataForInstance(instanceName)\n  store.save()\n  const { virtualListStore } = await importVirtualListStore()\n  virtualListStore.clearRealmByPrefix(currentInstance + '/') // TODO: this is a hacky way to clear the vlist cache\n  toast.say(message)\n  const { enableGrayscale } = store.get()\n  switchToTheme(instanceThemes[newInstance], enableGrayscale)\n  /* no await */ database.clearDatabaseForInstance(instanceName)\n  goto('/settings/instances')\n}\n\nfunction setStoreVerifyCredentials (instanceName, thisVerifyCredentials) {\n  const { verifyCredentials } = store.get()\n  verifyCredentials[instanceName] = thisVerifyCredentials\n  store.set({ verifyCredentials })\n}\n\nexport async function updateVerifyCredentialsForInstance (instanceName) {\n  const { loggedInInstances } = store.get()\n  const accessToken = loggedInInstances[instanceName].access_token\n  await cacheFirstUpdateAfter(\n    () => getVerifyCredentials(instanceName, accessToken).catch(logOutOnUnauthorized(instanceName)),\n    () => database.getInstanceVerifyCredentials(instanceName),\n    verifyCredentials => database.setInstanceVerifyCredentials(instanceName, verifyCredentials),\n    verifyCredentials => setStoreVerifyCredentials(instanceName, verifyCredentials)\n  )\n}\n\nexport async function updateVerifyCredentialsForCurrentInstance () {\n  const { currentInstance } = store.get()\n  await updateVerifyCredentialsForInstance(currentInstance)\n}\n\nexport async function updateInstanceInfo (instanceName) {\n  await cacheFirstUpdateAfter(\n    () => {\n      const { loggedInInstances } = store.get()\n      const accessToken = loggedInInstances[instanceName] && loggedInInstances[instanceName].access_token\n      return getInstanceInfo(instanceName, accessToken)\n    },\n    () => database.getInstanceInfo(instanceName),\n    info => database.setInstanceInfo(instanceName, info),\n    info => {\n      const { instanceInfos } = store.get()\n      instanceInfos[instanceName] = info\n      store.set({ instanceInfos })\n    }\n  )\n}\n\nexport function logOutOnUnauthorized (instanceName) {\n  return async error => {\n    if (error.message.startsWith('401:')) {\n      await logOutOfInstance(instanceName, formatIntl([\"The access token was revoked, logged out of \",[\"instance\"]], { instance: instanceName }))\n    }\n\n    throw error\n  }\n}\n","export const importVirtualListStore = () => import(\n  '../../_components/virtualList/virtualListStore.js'\n)\n","import { get, DEFAULT_TIMEOUT } from '../_utils/ajax.js'\nimport { auth, basename } from './utils.js'\n\nexport function getInstanceInfo (instanceName, accessToken) {\n  const url = `${basename(instanceName)}/api/v1/instance`\n  // accessToken is required in limited federation mode, but elsewhere we don't need it (e.g. during login)\n  const headers = accessToken ? auth(accessToken) : null\n  return get(url, headers, { timeout: DEFAULT_TIMEOUT })\n}\n"],"names":["changeTheme","instanceName","newTheme","instanceThemes","currentInstance","enableGrayscale","switchToInstance","searchResults","queryInSearch","async","logOutOfInstance","message","formatIntl","instance","composeData","customEmoji","instanceInfos","instanceLists","loggedInInstances","loggedInInstancesInOrder","verifyCredentials","splice","indexOf","newInstance","objectsToClear","obj","timelineInitialized","timelinePreinitialized","virtualListStore","clearRealmByPrefix","toast","database","updateVerifyCredentialsForInstance","accessToken","access_token","catch","error","startsWith","logOutOnUnauthorized","thisVerifyCredentials","setStoreVerifyCredentials","updateInstanceInfo","info","getInstanceInfo","url","headers","timeout"],"sourceRoot":""}