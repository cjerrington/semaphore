{"version":3,"file":"4990.807947add4f75dff3459.pinned.js","mappings":"kzCACMA,K,+LAAAA,K,saCAKC,M,SAAQC,O,sDAERC,Q,qEAHoBA,OAAOC,I,mPAC3BH,O,sBAAQC,Q,sBAERC,Q,oDAHoBA,OAAOC,I,sZC2ChC,IACE,MAAM,gBAAEC,GAAoBC,KAAKC,MAAMC,YACjC,QAAmCH,GACzC,MAAM,YAAEI,EAAW,yBAAEC,GAA6BJ,KAAKC,MAAMC,MACvDG,QAAiB,OAAkBN,EAAiBI,EAAaC,EAAyBN,IAChGE,KAAKM,IAAI,CAAED,YAKjB,CAJM,MAAOE,GACQC,EAAA,OAAU,EAAAC,EAAA,GAAW,CAAC,UAAU,CAAC,UAAW,CAAEC,OAAQH,EAAEI,MAAQ,IAAM,KAAOJ,EAAEK,SAAW,MAC/G,CAAM,QACAZ,KAAKM,IAAI,CAAEO,SAAS,GAC1B,CACF,C,yHAnDSA,QAAO,E,EAEHR,UAAY,EAAAA,SAAST,OAAM,O,8YAE3BS,S,aAAL,Y,qWAAKA,S,gBAAL,a,kHAAA,M,sOACmBR,O,QAASF,M,SAAeU,SAAST,Q,+JAAjCC,Q,wBAAwBQ,SAAST,Q,8FAmD3CK,EAAA,E,mEAJA,CACXY,SAAS,EACTC,SAAU,K,8nBAxDI,wB,yMAAfC,gB,0fCcY,CACXC,cAAa,G,iJAdNA,c,SAAgBC,Q,gRAAhBD,e,sBAAgBC,Q,4SCCtBC,eAAeC,EAAmBC,EAAcjB,EAAakB,GAClE,IAAIC,EAAM,IAAG,OAASF,sBAAiCC,aAKvD,OAJAC,GAAO,KAAM,QAAa,CACxBC,MAAO,GACPC,QAAQ,KAEH,QAAIF,GAAK,OAAKnB,GAAc,CAAEsB,QAAS,MAChD,C,gDCJOP,eAAeQ,EAAmB5B,EAAI6B,GAC3C,IAAK,IAAIC,EAAI,EAAGA,EAJF,EAIeA,IAAK,CAC5BA,EAAI,SACA,IAAIC,SAAQC,GAAWC,WAAWD,EAL9B,YAON,IAAID,SAAQC,IAAW,OAAiBA,KAC9C,MAAME,EAAUC,SAASC,eAAepC,GACxC,GAAIkC,EACF,IAGE,YAFAA,EAAQG,MAAM,CAAEC,eAAgBT,GAKlC,CAFE,MAAOpB,GACP8B,QAAQ3B,MAAMH,EAChB,CAEJ,CAEF,C","sources":["webpack://semaphore/./src/routes/_components/search/SearchResult.html","webpack://semaphore/./src/routes/_components/search/StatusSearchResult.html","webpack://semaphore/./src/routes/_pages/pinned.html","webpack://semaphore/./src/routes/pinned.html","webpack://semaphore/./src/routes/_api/pinnedStatuses.js","webpack://semaphore/./src/routes/_utils/tryToFocusElement.js"],"sourcesContent":["<li class=\"search-result\">\n  <a {href} class=\"search-result-anchor\" rel=\"prefetch\">\n    <slot></slot>\n  </a>\n</li>\n<style>\n  .search-result {\n    box-sizing: border-box;\n    border-bottom: 1px solid var(--main-border);\n    display: flex;\n  }\n  .search-result:last-child {\n    border-bottom: none;\n  }\n  .search-result-anchor {\n    padding: 20px;\n    flex: 1;\n    background: var(--settings-list-item-bg);\n  }\n  .search-result-anchor, .search-result-anchor:visited {\n    color: var(--body-text-color);\n  }\n  .search-result-anchor:hover {\n    background: var(--settings-list-item-bg-hover);\n    text-decoration: none;\n  }\n  .search-result-anchor:active {\n    background: var(--settings-list-item-bg-active);\n  }\n\n  @media (max-width: 767px) {\n    .search-result-anchor {\n      padding: 15px 10px;\n    }\n  }\n</style>\n","<SearchResult href=\"/statuses/{status.id}\">\n  <Status {index} {length}\n          timelineType=\"search\" timelineValue=\"search\"\n          {status} />\n</SearchResult>\n<style>\n</style>\n<script>\n  import SearchResult from './SearchResult.html'\n  import Status from '../status/Status.html'\n\n  export default {\n    components: {\n      SearchResult,\n      Status\n    }\n  }\n</script>","<DynamicPageBanner title=\"Pinned toots\" icon=\"#fa-thumb-tack\" />\n{#if $isUserLoggedIn }\n  <div class=\"pinned-toots-page\">\n    {#if loading}\n    <LoadingPage />\n    {:elseif statuses && statuses.length}\n    <ul class=\"pinned-toots-results\">\n      {#each statuses as status, index}\n      <StatusSearchResult {status} {index} length={statuses.length} />\n      {/each}\n    </ul>\n    {/if}\n  </div>\n{/if}\n<style>\n  .pinned-toots-page {\n    padding: 20px 20px;\n    position: relative;\n  }\n  .pinned-toots-results {\n    list-style: none;\n    box-sizing: border-box;\n    border: 1px solid var(--main-border);\n    border-radius: 2px;\n  }\n  @media (max-width: 767px) {\n    .pinned-toots-page {\n      padding: 20px 10px;\n    }\n  }\n</style>\n<script>\n  import { store } from '../_store/store.js'\n  import LoadingPage from '../_components/LoadingPage.html'\n  import StatusSearchResult from '../_components/search/StatusSearchResult.html'\n  import { toast } from '../_components/toast/toast.js'\n  import DynamicPageBanner from '../_components/DynamicPageBanner.html'\n  import { getPinnedStatuses } from '../_api/pinnedStatuses.js'\n  import { updateVerifyCredentialsForInstance } from '../_actions/instances.js'\n  import { formatIntl } from '../_utils/formatIntl.js'\n\n  export default {\n    async oncreate () {\n      try {\n        const { currentInstance } = this.store.get()\n        await updateVerifyCredentialsForInstance(currentInstance)\n        const { accessToken, currentVerifyCredentials } = this.store.get()\n        const statuses = await getPinnedStatuses(currentInstance, accessToken, currentVerifyCredentials.id)\n        this.set({ statuses })\n      } catch (e) {\n        /* no await */ toast.say(formatIntl([\"Error: \",[\"error\"]], { error: (e.name || '') + ' ' + (e.message || '') }))\n      } finally {\n        this.set({ loading: false })\n      }\n    },\n    data: () => ({\n      loading: true,\n      accounts: []\n    }),\n    store: () => store,\n    components: {\n      LoadingPage,\n      StatusSearchResult,\n      DynamicPageBanner\n    }\n  }\n</script>\n","<Title name=\"Pinned toots\" />\n\n  <LazyPage {pageComponent} {params} />\n\n<script>\n  import Title from './_components/Title.html'\n  import LazyPage from './_components/LazyPage.html'\n  import pageComponent from './_pages/pinned.html'\n\n  export default {\n    components: {\n\n      Title,\n      LazyPage\n    },\n    data: () => ({\n      pageComponent\n    })\n  }\n</script>\n","import { get, paramsString, DEFAULT_TIMEOUT } from '../_utils/ajax.js'\nimport { auth, basename } from './utils.js'\n\nexport async function getPinnedStatuses (instanceName, accessToken, accountId) {\n  let url = `${basename(instanceName)}/api/v1/accounts/${accountId}/statuses`\n  url += '?' + paramsString({\n    limit: 40,\n    pinned: true\n  })\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n","// try 5 times to wait for the element to be rendered and then focus it\nimport { scheduleIdleTask } from './scheduleIdleTask.js'\n\nconst RETRIES = 5\nconst TIMEOUT = 50\n\nexport async function tryToFocusElement (id, scroll) {\n  for (let i = 0; i < RETRIES; i++) {\n    if (i > 0) {\n      await new Promise(resolve => setTimeout(resolve, TIMEOUT))\n    }\n    await new Promise(resolve => scheduleIdleTask(resolve))\n    const element = document.getElementById(id)\n    if (element) {\n      try {\n        element.focus({ preventScroll: !scroll })\n        console.log('focused element', id)\n        return\n      } catch (e) {\n        console.error(e)\n      }\n    }\n  }\n  console.log('failed to focus element', id)\n}\n"],"names":["href","index","length","status","id","currentInstance","this","store","get","accessToken","currentVerifyCredentials","statuses","set","e","toast","formatIntl","error","name","message","loading","accounts","$isUserLoggedIn","pageComponent","params","async","getPinnedStatuses","instanceName","accountId","url","limit","pinned","timeout","tryToFocusElement","scroll","i","Promise","resolve","setTimeout","element","document","getElementById","focus","preventScroll","console"],"sourceRoot":""}